{"remainingRequest":"/Users/fenglin/Desktop/study/backstage/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/fenglin/Desktop/study/backstage/src/pages/index/account/AccountList.vue?vue&type=style&index=0&lang=less&","dependencies":[{"path":"/Users/fenglin/Desktop/study/backstage/src/pages/index/account/AccountList.vue","mtime":1591691907643},{"path":"/Users/fenglin/Desktop/study/backstage/node_modules/css-loader/dist/cjs.js","mtime":1590894352757},{"path":"/Users/fenglin/Desktop/study/backstage/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1590894353459},{"path":"/Users/fenglin/Desktop/study/backstage/node_modules/postcss-loader/src/index.js","mtime":1590894353111},{"path":"/Users/fenglin/Desktop/study/backstage/node_modules/less-loader/dist/cjs.js","mtime":1591183686071},{"path":"/Users/fenglin/Desktop/study/backstage/node_modules/cache-loader/dist/cjs.js","mtime":1590894340264},{"path":"/Users/fenglin/Desktop/study/backstage/node_modules/vue-loader/lib/index.js","mtime":1590894353459}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKLmVsLXBhZ2luYXRpb24gLmVsLXNlbGVjdCAuZWwtaW5wdXQgLmVsLWlucHV0X19pbm5lciB7CiAgcGFkZGluZy1yaWdodDogMjVweDsKICBib3JkZXItcmFkaXVzOiAzcHg7CiAgd2lkdGg6IDEwMHB4Owp9Cg=="},{"version":3,"sources":["AccountList.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAqNA;AACA;AACA;AACA;AACA","file":"AccountList.vue","sourceRoot":"src/pages/index/account","sourcesContent":["<template>\n  <el-card class=\"box-card\">\n    <div slot=\"header\" class=\"clearfix\">\n      <span>账号列表</span>\n    </div>\n    <el-table ref=\"multipleTable\" tooltip-effect=\"dark\" style=\"width: 100%;\" :data=\"tableData\"\n      @selection-change=\"handleSelectionChange\">\n      <!-- 设置列名  width:宽 type=\"selection\" :多选框 -->\n      <el-table-column type=\"selection\" width=\"55\"></el-table-column>\n      <el-table-column prop=\"account\" label=\"账号\" width=\"120\"></el-table-column>\n      <el-table-column prop=\"userGroup\" label=\"用户组\" width=\"120\"></el-table-column>\n      <el-table-column prop=\"ctime\" label=\"创建时间\"></el-table-column>\n      <!-- 按钮  tableData -->\n      <el-table-column label=\"操作\">\n        <template slot-scope=\"scope\">\n          <el-button size=\"mini\" @click=\"handleEdit(scope.$index, scope.row)\">编辑</el-button>\n          <el-dialog title=\"编辑用户信息\" :visible.sync=\"dialogFormVisible\">\n            <el-form :model=\"form\">\n              <el-form-item label=\"账号\" :label-width=\"formLabelWidth\">\n                <el-input v-model=\"form.account\" autocomplete=\"off\"></el-input>\n              </el-form-item>\n              <el-form-item label=\"用户组\" :label-width=\"formLabelWidth\">\n                <el-select v-model=\"form.userGroup\" placeholder=\"请选择用户组\">\n                  <el-option label=\"超级管理员\" value=\"超级管理员\"></el-option>\n                  <el-option label=\"普通管理员\" value=\"普通管理员\"></el-option>\n                </el-select>\n              </el-form-item>\n            </el-form>\n            <div slot=\"footer\" class=\"dialog-footer\">\n              <el-button @click=\"dialogFormVisible = false\">取 消</el-button>\n              <el-button type=\"primary\" :plain=\"true\" @click=\"edit_btn\">确 定</el-button>\n            </div>\n          </el-dialog>\n          <el-button size=\"mini\" :plain=\"true\" @click=\"handleDelete(scope.$index, scope.row)\">删除</el-button>\n        </template>\n      </el-table-column>\n    </el-table>\n    <!-- 分页器:当前页码,每页条数-->\n    <!--page-sizes:每页条数的数组,page-sizes:可以选择的每页显示的条数,page-size:每页显示的条数,pager:当前页-->\n    <el-pagination @size-change=\"handleSizeChange\" @current-change=\"handleCurrentChange\" :page-sizes=\"[5, 10]\"\n      :page-size=\"5\" layout=\"total, sizes, prev, pager, next\" :total=\"total\"></el-pagination>\n    <!-- 按钮-->\n    <div style=\"margin-top: 20px;\">\n      <el-button type=\"danger\" @click=\"batch_bth\">批量删除</el-button>\n      <el-button @click=\"cancel_btn\" type=\"primary\">取消选择</el-button>\n    </div>\n  </el-card>\n</template>\n\n<script>\n  // 添加列表 // 删除// 编辑 // 批量删除\n  import {\n    API_LIST,\n    API_DEl,\n    API_EDIT,\n    API_BATCHDEL\n    \n  } from \"@/api/apis\";\n\n  export default {\n    // 数据\n    data() {\n      return {\n        account: \"\",\n        tableData: [],\n        currentPage: 1, //默认显示第一页\n        pageSize: 5, //默认每页显示5条\n        multipleSelection: [],\n        total: 0,\n        id: 0,\n        // 编辑框的显示和隐藏\n        flag: false,\n        dialogTableVisible: false,\n        dialogFormVisible: false,\n        // 批量删除id 数组\n        idArr: [],\n        form: {\n          account: \"\",\n          userGroup: \"\"\n        },\n        formLabelWidth: \"120px\"\n      };\n    },\n    // 方法\n    methods: {\n      // 刷新用户列表函数\n      refresh() {\n        API_LIST(this.currentPage, this.pageSize).then(res => {\n          this.tableData = res.data.data;\n          this.total = res.data.total;\n          // console.log(res);\n        });\n\n      },\n      toggleSelection(rows) {\n        if (rows) {\n          rows.forEach(row => {\n            this.$refs.multipleTable.toggleRowSelection(row);\n          });\n        } else {\n          this.$refs.multipleTable.clearSelection();\n        }\n      },\n      // 分页:动态每页显示条数\n      handleSizeChange(val) {\n        // console.log(`${val}`);\n        this.pageSize = val; //动态改变\n        // 改变之后应该停留在当前的页面\n        this.refresh(this.currentPage)\n\n\n      },\n      // 分页:动态当前页,第几页\n      handleCurrentChange(val) {\n        // console.log(`${val}`);\n        //动态改变:每页多少条\n        this.currentPage = val;\n        this.refresh(this.currentPage)\n\n      },\n      // 选中\n      handleSelectionChange(val) {\n        this.multipleSelection = val;\n        // 数组对象\n        // console.log( this.multipleSelection )\n        for (let obj in this.multipleSelection) {\n          // console.log(this.multipleSelection[obj].id)\n          this.idArr.push(this.multipleSelection[obj].id);\n        }\n      },\n\n      //  取消选择\n      cancel_btn() {\n        this.$refs.multipleTable.clearSelection();\n      },\n      // 编辑模态框\n      handleEdit(index, row) {\n        // console.log(row);\n        // 显示模态框\n        this.dialogFormVisible = true;\n        // 复制给 form\n        this.form = row;\n      },\n      // 编辑\n      // dialogFormVisible = false\n      edit_btn() {\n        // console.log(this.form);\n        API_EDIT(this.form.id, this.form.account, this.form.userGroup).then(res => {\n          // console.log(res);\n          if (res.data.code == 0) {\n            this.$message({\n              showClose: true,\n              message: \"编辑成功~\",\n              type: \"success\"\n            });\n            // 隐藏模态框\n            this.dialogFormVisible = false;\n          }\n        });\n      },\n      // 删除\n      handleDelete(index, row) {\n        this.$confirm('此操作将永久删除该数据, 是否继续?', '提示', {\n          confirmButtonText: '确定',\n          cancelButtonText: '取消',\n          type: 'warning'\n        }).then(() => {\n          API_DEl(row.id).then(res => {\n            if (res.data.code == 0) {\n              // 重新渲染\n              this.refresh(this.currentPage)\n              this.$message({\n                showClose: true,\n                message: \"删除成功~\",\n                type: \"success\"\n              });\n            }\n          });\n        })\n        // console.log(row.id);\n      },\n      // 批量删除\n      batch_bth() {\n        this.$confirm('此操作将永久删除该数据, 是否继续?', '提示', {\n          confirmButtonText: '确定',\n          cancelButtonText: '取消',\n          type: 'warning'\n        }).then(() => {\n          // console.log(JSON.stringify(this.idArr))\n          API_BATCHDEL(JSON.stringify(this.idArr)).then(res => {\n            // console.log(res);\n            if (res.data.code == 0) {\n              this.refresh(this.currentPage)\n              this.$message({\n                showClose: true,\n                message: \"删除成功~\",\n                type: \"success\"\n              });\n            }\n          });\n        })\n\n      }\n    },\n    // 页面加载完毕的时候加载列表\n    created() {\n      // console.log('请求的参数',this.currentPage);\n      this.refresh()\n    }\n  };\n</script>\n\n<style lang=\"less\">\n  .el-pagination .el-select .el-input .el-input__inner {\n    padding-right: 25px;\n    border-radius: 3px;\n    width: 100px;\n  }\n</style>"]}]}