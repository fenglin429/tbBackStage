{"remainingRequest":"/Users/fenglin/Desktop/study/backstage/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/fenglin/Desktop/study/backstage/src/pages/index/commodity/Classify.vue?vue&type=style&index=0&id=701052a7&lang=less&scoped=true&","dependencies":[{"path":"/Users/fenglin/Desktop/study/backstage/src/pages/index/commodity/Classify.vue","mtime":1591758258661},{"path":"/Users/fenglin/Desktop/study/backstage/node_modules/css-loader/dist/cjs.js","mtime":1590894352757},{"path":"/Users/fenglin/Desktop/study/backstage/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1590894353459},{"path":"/Users/fenglin/Desktop/study/backstage/node_modules/postcss-loader/src/index.js","mtime":1590894353111},{"path":"/Users/fenglin/Desktop/study/backstage/node_modules/less-loader/dist/cjs.js","mtime":1591183686071},{"path":"/Users/fenglin/Desktop/study/backstage/node_modules/cache-loader/dist/cjs.js","mtime":1590894340264},{"path":"/Users/fenglin/Desktop/study/backstage/node_modules/vue-loader/lib/index.js","mtime":1590894353459}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKLmVsLWlucHV0X19pbm5lciB7CiAgd2lkdGg6IDEwMHB4ICFpbXBvcnRhbnQ7Cn0KCg=="},{"version":3,"sources":["Classify.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAwNA;AACA;AACA","file":"Classify.vue","sourceRoot":"src/pages/index/commodity","sourcesContent":["<template>\n  <el-card class=\"box-card\">\n    <div slot=\"header\" class=\"clearfix\">\n      <span>商品分类</span>\n      <el-button style=\"float: right; padding: 3px 0\" @click='add_btn' type=\"text\">添加分类</el-button>\n      <!-- 添加分类的模态框 -->\n      <el-dialog title=\"添加分类\" :visible.sync=\"dialogFormVisible\">\n        <el-form>\n          <el-form-item label=\"分类名称\" :label-width=\"formLabelWidth\">\n            <el-input v-model=\"name\" autocomplete=\"off\"></el-input>\n          </el-form-item>\n          <el-form-item label=\"是否启用\" :label-width=\"formLabelWidth\">\n            <el-tooltip placement=\"top\">\n              <!-- slot-scope=\"scope\" -->\n              <el-switch v-model=\"value\" active-color=\"#13ce66\" inactive-color=\"#ff4949\">\n              </el-switch>\n            </el-tooltip>\n            <!-- <el-input v-model=\"form.name\" autocomplete=\"off\"></el-input> -->\n          </el-form-item>\n        </el-form>\n        <div slot=\"footer\" class=\"dialog-footer\">\n          <el-button @click=\"dialogFormVisible = false\">取 消</el-button>\n          <el-button type=\"primary\" @click=\"add_classify_btn\">确 定</el-button>\n        </div>\n      </el-dialog>\n    </div>\n    <!-- 分类的表格 -->\n    <el-table :data=\"tableData\" stripe style=\"width: 100%\">\n      <el-table-column prop=\"id\" label=\"序号\" width=\"180\"></el-table-column>\n      <el-table-column prop=\"cateName\" label=\"分类名称\" width=\"180\"></el-table-column>\n      <el-table-column label=\"是否启用\">\n        <!-- :content=\"value\"  -->\n        <!-- <el-tooltip placement=\"top\">  row.flag -->\n        <!-- 表格的滑动按钮 -->\n        <template slot-scope=\"scope\">\n          <el-switch v-model=\"scope.row.state\" active-color=\"#13ce66\" inactive-color=\"#ff4949\">\n          </el-switch>\n        </template>\n        <!-- </el-tooltip> -->\n      </el-table-column>\n      <el-table-column label=\"操作\">\n        <template slot-scope=\"scope\">\n          <el-button size=\"mini\" @click=\"handleEdit(scope.$index, scope.row)\">编辑</el-button>\n          <!-- 编辑的模态框 -->\n          <el-dialog title=\"编辑商品信息\" :visible.sync=\"dialogFormVisible4Edit\">\n            <el-form :model=\"form\">\n              <el-form-item label=\"分类名称\" :label-width=\"formLabelWidth\">\n                <el-input v-model=\"form.cateName\"></el-input>\n              </el-form-item>\n              <!-- form.userGroup -->\n              <el-form-item label=\"分类状态\" :label-width=\"formLabelWidth\">\n                <el-switch v-model=\"form.state\" @change=\"stateChange\" active-color=\"#13ce66\" inactive-color=\"#ff4949\">\n                </el-switch>\n              </el-form-item>\n            </el-form>\n            <div slot=\"footer\" class=\"dialog-footer\">\n              <el-button @click=\"dialogFormVisible4Edit = false\">取 消</el-button>\n              <el-button type=\"primary\" @click='affirmEdit_btn'>确 定</el-button>\n            </div>\n          </el-dialog>\n          <el-button size=\"mini\" type=\"danger\" @click=\"handleDelete(scope.$index, scope.row)\">删除</el-button>\n        </template>\n      </el-table-column>\n    </el-table>\n    <!-- 分页器:当前页码,每页条数-->\n    <!--page-sizes:每页条数的数组,page-sizes:可以选择的每页显示的条数,page-size: 默认每页显示的条数,pager:当前页-->\n    <el-pagination @size-change=\"handleSizeChange\" @current-change=\"handleCurrentChange\" :current-page=\"currentPage\"\n      :page-sizes=\"[5, 10, 15]\" :page-size=\"5\" layout=\"total, sizes, prev, pager, next, jumper\" :total=\"total\">\n    </el-pagination>\n\n  </el-card>\n\n</template>\n\n<script>\n  import { API_GOODS_ADDCATE, API_GOODS_CATELIST, API_GOODS_DELCATE, API_GOODS_EDITCATE } from \"@/api/apis\";\n  export default {\n    data() {\n      return {\n        form: {\n          id: \"\",\n          state: '',\n          cateName: \"\",\n        },\n        // 第几页\n        currentPage: 1,\n        // 每页显示几条\n        pageSize: '5',\n        name: \"\",\n        // 总条数\n        total: 0,\n        tableData: [],\n        delivery: false,\n        formLabelWidth: '120px',\n        // 模态框是否显示\n        dialogFormVisible: false,\n        // map2Obj\n        dialogFormVisible4Edit: false,\n        value: '100',\n        value2: ''\n      };\n    },\n\n    methods: {\n      // 编辑\n      affirmEdit_btn() {\n        this.value2 = this.form.state == false ? 'false' : 'true'\n        API_GOODS_EDITCATE(this.form.id, this.form.cateName, this.value2).then(res => {\n          // console.log(res);\n          if (res.data.code == 0) {\n            //   // 隐藏模态框\n            this.dialogFormVisible4Edit = false;\n            this.$message({\n              showClose: true,\n              message: \"编辑成功~\",\n              type: \"success\"\n            });\n          }\n        })\n      },\n      handleClose(done) {\n        this.$confirm(\"确认关闭？\")\n          .then(() => {\n            done();\n          })\n          .catch(() => {});\n      },\n      stateChange() {\n\n        // console.log(this.form)\n      },\n      // 显示添加模态框\n      add_btn() {\n        // console.log(1);\n        this.dialogFormVisible = true\n      },\n      add_classify_btn() {\n        // console.log(1);\n        // console.log(this.name);\n        // console.log(this.value);\n        let state = this.value == 1 ? 'true' : 'false';\n        if (this.name == '') return;\n        API_GOODS_ADDCATE(this.name, state).then(res => {\n          // console.log(res.data.code);\n          if (res.data.code == 0) {\n            //  隐藏模态框\n            this.dialogFormVisible = false\n            this.$message({\n              message: '添加成功~',\n              type: 'success'\n            });\n          }\n        })\n      },\n      // 分页:动态每页显示条数\n      handleSizeChange(val) {\n        // console.log(`${val}`);\n        this.pageSize = val; //动态改变\n        // console.log(this.pageSize);\n        this.refresh(this.currentPage)\n        // 改变之后应该停留在当前的页面\n        // this.refresh(this.pageSize)\n      },\n      // 分页:动态当前页,第几页\n      handleCurrentChange(val) {\n        // console.log(`${val}`);\n        //动态改变:每页多少条\n        this.currentPage = val;\n        // console.log( this.currentPage );\n        this.refresh(this.currentPage)\n        // this.refresh(this.currentPage)\n\n      },\n      refresh() {\n        API_GOODS_CATELIST(this.currentPage, this.pageSize).then(res => {\n          this.total = res.data.total\n          this.tableData = res.data.data\n          this.tableData.forEach(i => {\n            i.state = i.state == 1 ? true : false\n          });\n        })\n      },\n      handleDelete(index, row) {\n        this.$confirm('此操作将永久删除该数据, 是否继续?', '提示', {\n          confirmButtonText: '确定',\n          cancelButtonText: '取消',\n          type: 'warning'\n        }).then(() => {\n          API_GOODS_DELCATE(row.id).then(res => {\n            if (res.data.code == 0) {\n              // 重新渲染\n              this.refresh()\n              this.$message({\n                showClose: true,\n                message: \"删除成功~\",\n                type: \"success\"\n              });\n            }\n          });\n        })\n        // console.log(row.id);\n      },\n    },\n    created() {\n      // console.log(this.pageSize)\n      // console.log(this.currentPage);\n      this.refresh(this.currentPage)\n      // var arr=this.tableData.filter(item=>{\n      //   return  item\n      // })\n    },\n\n  };\n</script>\n\n<style lang=\"less\" scoped>\n    .el-input__inner {\n      width: 100px !important;\n    }\n\n</style>"]}]}